{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","to","id","src","thumbnail","alt","title","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","display","onClick","ComicsPage","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"iNA6EeA,EArEI,WAClB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEA,EAAyCC,cAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,aAExBC,qBAAU,WACTC,EAAUT,GAAQ,KAChB,IAEH,IAAMS,EAAY,SAACT,EAAQU,GAChBX,GAAVW,GACAH,EAAaP,GAAQW,KAAKC,IAGrBA,EAAqB,SAACC,GAC3B,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IAC1BD,GAAQ,GAETjB,EAAc,GAAD,mBAAKD,GAAL,YAAoBiB,KACjCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,IAsBhB,IAAME,EAnBN,SAAqBC,GACpB,IAAMD,EAAQC,EAAIC,KAAI,SAACC,EAAMC,GAC5B,OACC,oBAAIC,UAAU,eAAd,SACC,eAAC,IAAD,CAAMC,GAAE,kBAAaH,EAAKI,IAA1B,UACC,qBACCC,IAAKL,EAAKM,UACVC,IAAKP,EAAKQ,MACVN,UAAU,qBAEX,qBAAKA,UAAU,oBAAf,SAAoCF,EAAKQ,QACzC,qBAAKN,UAAU,qBAAf,SAAqCF,EAAKS,YARVR,MAapC,OAAO,oBAAIC,UAAU,eAAd,SAA8BL,IAGxBa,CAAYjC,GAEpBkC,EAAexB,EAAQ,cAACyB,EAAA,EAAD,IAAmB,KAC1CC,EAAU3B,IAAYP,EAAiB,cAACmC,EAAA,EAAD,IAAc,KAE3D,OACC,sBAAKZ,UAAU,eAAf,UACES,EACAE,EACAhB,EACD,wBACCK,UAAU,mCACVa,SAAUpC,EACVqC,MAAO,CAAEC,QAASlC,EAAc,OAAS,SACzCmC,QAAS,kBAAM5B,EAAUT,IAJ1B,SAMC,qBAAKqB,UAAU,QAAf,6BC3DWiB,UATI,WAClB,OACC,qCACC,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCHY,SAASC,EAAmBvB,GACzC,OCJa,SAA4BA,GACzC,GAAIwB,MAAMC,QAAQzB,GAAM,OAAO,OAAA0B,EAAA,GAAiB1B,GDGzC,CAAkBA,IELZ,SAA0B2B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB3B,IAAQ,OAAAgC,EAAA,GAA2BhC,IGLvE,WACb,MAAM,IAAIiC,UAAU,wIHIwE","file":"static/js/6.9196b3e5.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\tconst [comicsList, setComicsList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(0);\n\tconst [comicsEnded, setComicsEnded] = useState(false);\n\n\tconst { loading, error, getAllComics } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllComics(offset).then(onComicsListLoaded);\n\t};\n\n\tconst onComicsListLoaded = (newComicsList) => {\n\t\tlet ended = false;\n\t\tif (newComicsList.length < 8) {\n\t\t\tended = true;\n\t\t}\n\t\tsetComicsList([...comicsList, ...newComicsList]);\n\t\tsetnewItemLoading(false);\n\t\tsetOffset(offset + 8);\n\t\tsetComicsEnded(ended);\n\t};\n\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\treturn (\n\t\t\t\t<li className=\"comics__item\" key={i}>\n\t\t\t\t\t<Link to={`/comics/${item.id}`}>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={item.thumbnail}\n\t\t\t\t\t\t\talt={item.title}\n\t\t\t\t\t\t\tclassName=\"comics__item-img\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"comics__item-name\">{item.title}</div>\n\t\t\t\t\t\t<div className=\"comics__item-price\">{item.price}</div>\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t\treturn <ul className=\"comics__grid\">{items}</ul>;\n\t}\n\n\tconst items = renderItems(comicsList);\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n\treturn (\n\t\t<div className=\"comics__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\t\t\t<button\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ display: comicsEnded ? 'none' : 'block' }}\n\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default ComicsList;\n","import AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t<ComicsList />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default ComicsPage;\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}